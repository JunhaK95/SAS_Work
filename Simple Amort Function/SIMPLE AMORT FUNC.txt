--------------------------------------
This function works on a monthly basis.
But it needs a solution for lower payment frequencies.
--------------------------------------


/* Creating the historic interest rate table. start_date indicates the last day in which the first_rate is applicable,
and end_date indicates the last day in which second_rate is applicable */
DATA work.rates;
infile datalines delimiter='	';
	format start_date end_date yymmdd10.;
	INPUT start_date : yymmdd10. end_date : yymmdd10. first_rate second_rate;
	DATALINES;
2023/05/26	3000/06/01	0.1125	0.1175
2023/03/31	2023/05/26	0.1075	0.1125
2023/01/27	2023/03/31	0.1050	0.1075
2022/11/25	2023/01/27	0.0975	0.1050
2022/09/23	2022/11/25	0.0900	0.0975
2022/07/22	2022/09/23	0.0825	0.0900
2022/05/20	2022/07/22	0.0775	0.0825
2022/03/25	2022/05/20	0.0750	0.0775
2022/01/28	2022/03/25	0.0725	0.0750
2021/11/19	2022/01/28	0.0700	0.0725
2020/07/24	2021/11/19	0.0725	0.0700
2020/05/22	2020/07/24	0.0775	0.0725
2020/04/15	2020/05/22	0.0875	0.0775
2020/03/20	2020/04/15	0.0975	0.0875
2020/01/17	2020/03/20	0.1000	0.0975
2019/07/17	2020/01/17	0.1025	0.1000
2018/11/23	2019/07/17	0.1000	0.1025
2018/03/29	2018/11/23	0.1025	0.1000
2017/07/21	2018/03/29	0.1050	0.1025
2016/03/18	2017/07/21	0.1025	0.1050
2016/01/29	2016/03/18	0.0975	0.1025
2015/11/20	2016/01/29	0.0950	0.0975
2015/07/24	2015/11/20	0.0925	0.0950
2014/07/18	2015/07/24	0.0900	0.0925
2014/01/30	2014/07/18	0.0850	0.0900
2012/07/20	2014/01/30	0.0900	0.0850
2010/11/19	2012/07/20	0.0950	0.0900
2010/09/10	2010/11/19	0.1000	0.0950
2010/03/26	2010/09/10	0.1050	0.1000
2009/08/14	2010/03/26	0.1100	0.1050
2009/05/29	2009/08/14	0.1200	0.1100
2009/05/29	2009/08/14	0.1200	0.1100
2009/03/25	2009/05/04	0.1400	0.1300
2009/02/06	2009/03/25	0.1500	0.1400
2008/12/12	2009/02/06	0.1550	0.1500
2008/06/13	2008/12/12	0.1500	0.1550
2008/04/11	2008/06/13	0.1450	0.1500
2007/12/07	2008/04/11	0.1400	0.1450
2007/10/12	2007/12/07	0.1350	0.1400
2007/08/17	2007/10/12	0.1300	0.1350
2007/06/08	2007/08/17	0.1250	0.1300

;

PROC SORT data = work.rates;
BY start_date;
RUN;

/*Making the straight amort macro function*/
	%macro simple_amort(term, pp, loan_amount, start_date, sharia);
	
/* This data step creates the dimensions of the amort (eg. payment dates, payment numbers) using a for loop. Where we
loop through the number of payments */ 
	DATA dim_amort;
		FORMAT payment_date yymmdd10. days_between_payment_dates best12.;
		RETAIN prev_payment_date;

		DO period=0 TO &term.*&pp.;
			payment_date=INTNX('month', &start_date., period/&pp.*12, 'same');

			IF period > 0 THEN
				days_between_payment_dates=INTCK('day', prev_payment_date, payment_date);
			ELSE
				days_between_payment_dates=0;
			prev_payment_date=payment_date;
			payment_number=period;
			remaining_payments=&term.*&pp. - period + 1;
			OUTPUT;
		END;
		DROP prev_payment_date;
	RUN;

/* In creating work rates 2 we modify the interest rate table account for Sharia dates. */
	DATA work.rate2;
		SET work.rates;

/* Calculate start_date_sharia by finding the beginning of the next month.
I use a case statement to make exceptions for when the day of the month is the 1st.*/
		IF DAY(start_date)=1 THEN
			DO;
				start_date_sharia=start_date;
			END;
		ELSE
			DO;
				start_date_sharia=INTNX('MONTH', start_date, 1, 'BEGIN');
			END;

/* Same step as above but now for end_dates*/
		IF DAY(end_date)=1 THEN
			DO;
				end_date_sharia=end_date;
			END;
		ELSE
			DO;
				end_date_sharia=INTNX('MONTH', end_date, 1 , 'BEGIN');
			END;

/* Applying the desired format to each date column*/
		FORMAT start_date_sharia ir_start_date end_date_sharia ir_end_date yymmdd10.;

/* Creating sharia_flag variable to that indicates Sharia using the macro variable */
		sharia_flag="&sharia";

/* Creating the interest rate start and end dates (ir_X_date) that is appropriate to the Sharia status of the loan.
These are the dates that will be used when joining to the dim_amort table. */
		IF sharia_flag='y' THEN
			DO;
				ir_start_date=start_date_sharia;
				ir_end_date=end_date_sharia;
			END;
		ELSE
			DO;
				ir_start_date=start_date;
				ir_end_date=end_date;
			END;
		DROP start_date_sharia end_date_sharia start_date end_date sharia_flag;
	RUN;

/* Creating the join between dim_amort and rates2. This process will also calculate the number of days each payment experiences in each interest rate. */
	PROC SQL;
		CREATE TABLE work.dim_rates_amort AS 
                        SELECT *,
/* days count is done in these case statements daysinone = days in first interest rate, daysintwo = days in second interest rate */
                        CASE WHEN 
			days_between_payment_dates - (payment_date - ir_start_date) <=0 THEN 
			days_between_payment_dates ELSE 
			days_between_payment_dates - (payment_date - ir_start_date) END AS daysinone, 
                        
                        CASE WHEN 
			payment_date - ir_start_date < days_between_payment_dates THEN 
			payment_date - ir_start_date ELSE 0 END AS daysintwo 
                        
                        FROM work.dim_amort a 
/* I use a left join because the loan dimensions must always be kept. When the payment date is in between the interest rate change dates
we know that the relevant rate will be joined to each payment date. */
			LEFT JOIN work.rate2 r ON a.payment_date >=r.ir_start_date and 
			a.payment_date < r.ir_end_date;
	QUIT;

/* This data step uses a for loop to create the actual amort schedule. */

	DATA work.amort_schedule;
		SET work.dim_rates_amort;

/* The previous closing balance needs to be retained throughout the for loop so that the next opening balance can use that value */
		RETAIN closing_balance;

/* First work out effective interest rates to simplify repayment and interest formulas. Suffix 'Rchange' indicates that these rates are used 
when there is a rate change. 'noRchange' is the rate used when there is no rate change. */
		first_eff_rate_Rchange=first_rate / 365 * daysinone;
		second_eff_rate_Rchange=second_rate / 365 * daysintwo;
		eff_rate_noRchange = second_rate / 365 * daysinone;

/* We use a case statement to check when the period is 0 as this needs to reflect the initial condition of the loan.

fr_repayment = repayment amount under first rate
fr_cap = capital portion of repayment under first rate
fr_int = interest portion of repayment under first rate

sr_X = fr equivalents just under the second interest rate.*/

		IF period=0 THEN
			DO;
				opening_balance=&loan_amount.;
				fr_repayment=0;
				fr_cap=0;
				fr_int=0;
				sr_repayment=0;
				sr_cap=0;
				sr_int=0;
				tot_rep=fr_repayment + sr_repayment;
				tot_int=fr_int + sr_int;
				tot_cap=fr_cap + sr_cap;
				closing_balance=&loan_amount.;
			END;

/* Now we begin to create the actual amort schedule. */
		ELSE
			DO;
				opening_balance=closing_balance;

				IF daysinone=0 THEN
					DO;
						fr_repayment=0;
						fr_int=0;
					END;

/* When daysinone = days_between_payments, then we want to use the 2nd rate as there was no rate change experienced. */
				ELSE IF daysinone = days_between_payment_dates THEN DO;
				fr_repayment=opening_balance/((1-(1+eff_rate_noRchange)**(-remaining_payments))/(eff_rate_noRchange))*daysinone/days_between_payment_dates;
						fr_int=opening_balance * eff_rate_noRchange;
				END;
/* Otherwise, there was a rate change and we will use the first rate. */
				ELSE
					DO;
						fr_repayment=opening_balance/((1-(1+first_eff_rate_Rchange)**(-remaining_payments))/(first_eff_rate_Rchange))*daysinone/days_between_payment_dates;
						fr_int=opening_balance * first_eff_rate_Rchange;
					END;
				fr_cap=fr_repayment - fr_int;

/* If daysintwo=0 then there was no rate changes, so sr_X should be 0 */
				IF daysintwo=0 THEN
					DO;
						sr_repayment=0;
						sr_int=0;
					END;
/* Otherwise there was a rate change and sr_X needs to be calculated. */
				ELSE
					DO;
						sr_repayment=opening_balance/((1-(1+second_eff_rate_Rchange)**(-remaining_payments))/(second_eff_rate_Rchange))*daysintwo/days_between_payment_dates;
						sr_int=opening_balance*second_eff_rate_Rchange;
					END;
				sr_cap=sr_repayment - sr_int;

/* calculating totals */
				tot_rep=fr_repayment + sr_repayment;
				tot_int=fr_int + sr_int;
				tot_cap=fr_cap + sr_cap;
				closing_balance=opening_balance - tot_cap;
			END;
	RUN;


/* printing the resulting amort schedule */
	PROC PRINT DATA=work.amort_schedule;
		VAR payment_date payment_number days_between_payment_dates ir_start_date 
			first_rate ir_end_date second_rate daysinone fr_int fr_repayment  
			daysintwo sr_int sr_repayment tot_int tot_cap tot_rep closing_balance;
	RUN;

%mend;
/*
%let term = 3;
	%let pp = 12;
	%let total_payments = &term. * &pp.;
	%let loan_amount = 1000000;
	%let start_date = input('2019-12-14', yymmdd10.);
	%let sharia = n;
	*/
%simple_amort(3, 12, 100000, '14DEC2019'd, n);

-------------------------------------------------------------
This sort of fixes the lower payment frequency issue but we have a NNNEEEEWWWWW  issue...
The repayment calculations happen on every row(which now represent each interest rate change)
, when in actual each row should be the next repayment....
-----------------------------------------------------------------

%let term = 3;
%let pp = 1;
%let total_payments = &term. * &pp.;
%let loan_amount = 1000000;
%let start_date = input('2020-12-27', yymmdd10.);
%let sharia = n;


DATA work.rates;
	infile datalines delimiter='	';
	format start_date end_date yymmdd10.;
	INPUT start_date : yymmdd10. end_date : yymmdd10. first_rate second_rate;
	DATALINES;
2023/05/26	3000/06/01	0.1125	0.1175
2023/03/31	2023/05/26	0.1075	0.1125
2023/01/27	2023/03/31	0.1050	0.1075
2022/11/25	2023/01/27	0.0975	0.1050
2022/09/23	2022/11/25	0.0900	0.0975
2022/07/22	2022/09/23	0.0825	0.0900
2022/05/20	2022/07/22	0.0775	0.0825
2022/03/25	2022/05/20	0.0750	0.0775
2022/01/28	2022/03/25	0.0725	0.0750
2021/11/19	2022/01/28	0.0700	0.0725
2020/07/24	2021/11/19	0.0725	0.0700
2020/05/22	2020/07/24	0.0775	0.0725
2020/04/15	2020/05/22	0.0875	0.0775
2020/03/20	2020/04/15	0.0975	0.0875
2020/01/17	2020/03/20	0.1000	0.0975
2019/07/17	2020/01/17	0.1025	0.1000
2018/11/23	2019/07/17	0.1000	0.1025
2018/03/29	2018/11/23	0.1025	0.1000
2017/07/21	2018/03/29	0.1050	0.1025
2016/03/18	2017/07/21	0.1025	0.1050
2016/01/29	2016/03/18	0.0975	0.1025
2015/11/20	2016/01/29	0.0950	0.0975
2015/07/24	2015/11/20	0.0925	0.0950
2014/07/18	2015/07/24	0.0900	0.0925
2014/01/30	2014/07/18	0.0850	0.0900
2012/07/20	2014/01/30	0.0900	0.0850
2010/11/19	2012/07/20	0.0950	0.0900
2010/09/10	2010/11/19	0.1000	0.0950
2010/03/26	2010/09/10	0.1050	0.1000
2009/08/14	2010/03/26	0.1100	0.1050
2009/05/29	2009/08/14	0.1200	0.1100
2009/05/29	2009/08/14	0.1200	0.1100
2009/03/25	2009/05/04	0.1400	0.1300
2009/02/06	2009/03/25	0.1500	0.1400
2008/12/12	2009/02/06	0.1550	0.1500
2008/06/13	2008/12/12	0.1500	0.1550
2008/04/11	2008/06/13	0.1450	0.1500
2007/12/07	2008/04/11	0.1400	0.1450
2007/10/12	2007/12/07	0.1350	0.1400
2007/08/17	2007/10/12	0.1300	0.1350
2007/06/08	2007/08/17	0.1250	0.1300

;

PROC SORT data=work.rates;
	BY start_date;
RUN;
PROC SORT data = work.rates;
BY start_date;
RUN;

/*Making the straight amort macro function*/
	%macro simple_amort(term, pp, loan_amount, start_date, sharia);
	
DATA dim_amort;
	FORMAT payment_date yymmdd10. days_between_payment_dates best12.;
    RETAIN prev_payment_date;
	DO period=0 TO &term.*&pp.;
		payment_date=INTNX('month', &start_date., period/&pp.*12, 'same');

		IF period > 0 THEN
			days_between_payment_dates=INTCK('day', prev_payment_date, payment_date);
		ELSE
			days_between_payment_dates=0;
		prev_payment_date=payment_date;
		previous_payment_date = LAG(payment_date);
		payment_number=period;
		remaining_payments=&term.*&pp. - period + 1;
		OUTPUT;
	END;
	DROP prev_payment_date;
RUN;

DATA work.rate2;
	SET work.rates;

	/* Calculate start_date_sharia by finding the beginning of the month */
	IF day(start_date)=1 THEN DO;
			start_date_sharia=start_date;
		END;
	ELSE DO;
			start_date_sharia=INTNX('MONTH', start_date, 1, 'BEGIN');
		END;

	IF DAY(end_date)=1 THEN DO;
			end_date_sharia=end_date;
		END;
	ELSE DO;
			end_date_sharia=INTNX('MONTH', end_date, 1 , 'BEGIN');
		END;

	/* Apply the desired format to start_date_sharia and start_date */
	FORMAT start_date_sharia ir_start_date end_date_sharia ir_end_date yymmdd10.;

	/* Create sharia_flag variable to hold the value of the macro variable */
	sharia_flag="&sharia";

	/* Converts macro variable to uppercase */
	/* Create start_date_2 variable based on the sharia_flag variable */
	IF sharia_flag='y' THEN DO;
			ir_start_date=start_date_sharia;
			ir_end_date=end_date_sharia;
		END;
	ELSE DO;
			ir_start_date=start_date;
			ir_end_date=end_date;
		END;
	ir_between = ir_end_date - ir_start_date;
	DROP start_date_sharia end_date_sharia start_date end_date sharia_flag;
RUN;

PROC SQL noprint;
CREATE TABLE work.new AS
SELECT *
FROM (SELECT *, 
	         CASE WHEN r.ir_start_date >= a.previous_payment_date AND r.ir_end_date <= a.payment_date THEN 1
	              WHEN r.ir_start_date <= a.payment_date AND r.ir_end_date >= a.payment_date THEN 1
	              ELSE 0 END AS ir_flag
		FROM work.dim_amort a 
		LEFT JOIN work.rate2 r
		ON r.ir_start_date < a.payment_date AND r.ir_end_date >= a.previous_payment_date)
		WHERE ir_flag = 1
		;
QUIT;

PROC SORT DATA = work.new;
BY payment_number;
RUN;

DATA work.new1;
   SET work.new;
   BY payment_number ir_start_date;
   IF first.payment_number THEN rank_ac=1;
   ELSE IF last.payment_number THEN rank_ac=2;
   ELSE rank_ac=0;
   IF last.payment_number AND first.payment_number THEN rank_ac = 3;
   ElSE rank_ac = rank_ac;
   lir_start_date = LAG(ir_start_date);
RUN;

PROC SQL noprint;
CREATE TABLE work.dim_rates_amort AS
SELECT *,
       CASE WHEN rank_ac = 2
            THEN payment_date - ir_start_date 
            WHEN rank_ac = 1 
            THEN important_day_counter
            ELSE important_day_counter - daysinone END AS daysintwo
	FROM (SELECT *,
	             CASE WHEN rank_ac = 1
	            	  THEN ir_start_date - previous_payment_date
	            	  WHEN rank_ac = 2
	            	  THEN 0
	            	  WHEN 0 < ir_start_date - previous_payment_date < important_day_counter
	            	  THEN ir_start_date - previous_payment_date
	            	  ELSE 0 END AS daysinone
	      FROM (SELECT *,
	              CASE WHEN ir_between < days_between_payment_dates AND rank_ac < 3 THEN ir_between
	                   WHEN ir_between < days_between_payment_dates AND rank_ac = 3 THEN days_between_payment_dates
	                   ELSE days_between_payment_dates END AS important_day_counter
	       FROM work.new1) AS AQ) AS DQ
;
QUIT;

/* This data step uses a for loop to create the actual amort schedule. */

	DATA work.amort_schedule;
		SET work.dim_rates_amort;

/* The previous closing balance needs to be retained throughout the for loop so that the next opening balance can use that value */
		RETAIN closing_balance;

/* First work out effective interest rates to simplify repayment and interest formulas. Suffix 'Rchange' indicates that these rates are used 
when there is a rate change. 'noRchange' is the rate used when there is no rate change. */
		first_eff_rate_Rchange=first_rate / 365 * daysinone;
		second_eff_rate_Rchange=second_rate / 365 * daysintwo;
		eff_rate_noRchange = second_rate / 365 * daysinone;

/* We use a case statement to check when the period is 0 as this needs to reflect the initial condition of the loan.

fr_repayment = repayment amount under first rate
fr_cap = capital portion of repayment under first rate
fr_int = interest portion of repayment under first rate

sr_X = fr equivalents just under the second interest rate.*/

		IF period=0 THEN
			DO;
				opening_balance=&loan_amount.;
				fr_repayment=0;
				fr_cap=0;
				fr_int=0;
				sr_repayment=0;
				sr_cap=0;
				sr_int=0;
				tot_rep=fr_repayment + sr_repayment;
				tot_int=fr_int + sr_int;
				tot_cap=fr_cap + sr_cap;
				closing_balance=&loan_amount.;
			END;

/* Now we begin to create the actual amort schedule. */
		ELSE
			DO;
				opening_balance=closing_balance;

				IF daysinone=0 THEN
					DO;
						fr_repayment=0;
						fr_int=0;
					END;			
/* Otherwise, there was a rate change and we will use the first rate. */
				ELSE
					DO;
						fr_repayment=opening_balance/((1-(1+first_eff_rate_Rchange)**(-remaining_payments))/(first_eff_rate_Rchange))*daysinone/days_between_payment_dates;
						fr_int=opening_balance * first_eff_rate_Rchange;
					END;
				fr_cap=fr_repayment - fr_int;

/* If daysintwo=0 then there was no rate changes, so sr_X should be 0 */
				IF daysintwo=0 THEN
					DO;
						sr_repayment=0;
						sr_int=0;
					END;
/* Otherwise there was a rate change and sr_X needs to be calculated. */
				ELSE
					DO;
						sr_repayment=opening_balance/((1-(1+second_eff_rate_Rchange)**(-remaining_payments))/(second_eff_rate_Rchange))*daysintwo/days_between_payment_dates;
						sr_int=opening_balance*second_eff_rate_Rchange;
					END;
				sr_cap=sr_repayment - sr_int;

/* calculating totals */
				tot_rep=fr_repayment + sr_repayment;
				tot_int=fr_int + sr_int;
				tot_cap=fr_cap + sr_cap;
				closing_balance=opening_balance - tot_cap;
			END;
	RUN;


/* printing the resulting amort schedule */
	PROC PRINT DATA=work.amort_schedule;
		VAR payment_date payment_number days_between_payment_dates ir_start_date 
			first_rate ir_end_date second_rate daysinone fr_int fr_repayment  
			daysintwo sr_int sr_repayment tot_int tot_cap tot_rep closing_balance;
			WHERE payment_number > 0;
	RUN;

%mend;
/*
%let term = 3;
	%let pp = 12;
	%let total_payments = &term. * &pp.;
	%let loan_amount = 1000000;
	%let start_date = input('2019-12-14', yymmdd10.);
	%let sharia = n;
	*/
	
%simple_amort(3, 1, 100000, '14DEC2020'd, n);